Spice Project

{ DEBUGGING
	* When Action Method is not hit by debugging, then it has NEVER been INVOKED ! 
	- EITHER Url is wrong, OR ActionName is incorrect
	
	
}
	


{ SetUp Specifics
	Install RazorPages runtimecompilation
	Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation
	- In order to get automatic refresh of changed razor pages
	
	- In ConfigureServices:
	services.AddRazorPages().AddRazorRuntimeCompilation();
}

{ Create Areas
	* Move to their Views Folders the _ViewStart and _ViewImports
	* In _ViewStart , add the actual path to the _Layout file.
	
	* In Package Manager Console - update-database (to apply migration of the Identity schema)
	
	* Scaffold the Identity Area in order to see its pages in the Identiy Folder
	
	* Change in Startup the default route for HOME
	{area=NAME}/{controller=Home}/{action=Index}/{id?}
	
}

{ Change _Layout to reflect the desired UI 
	- Add DropDownMenu for Categories
	- Create Admin CategoryController
	- Add TagHelpers to the dropdown-items
}

{ !!! Create related list of items from selected item in dropdown !!!
	
	
	AJAX Call  - It needs to be called two times:
	- when we see the document is ready, we call the function
	- next time whenever the dropdown is changed (when ddlCategoryList changes).
	
	@section Scripts
	{ 
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial")}

    <script>
        function updateSubcastegoryList() {
            var categorySelected = document.getElementById("ddlCategoryList").value;

            $list = $('#SubcategoryList');

            $.ajax({
                url: '/Admin/Subcategory/GetSubcategory' + categorySelected,
                type: 'GET',
                dataType: 'text',
                success: function (data) {
                    results = JSON.parse(data);
                    $lis.html('');
                    $lis.append(' <ul class="list-group"> ');
                    for (i in results) {
                        $list.append('<li class="list-group-item">' + results[i].text + '</li>');
                    }
                    $list.append('</ul>');
                }
            });
        }
		
		$(document).ready(function () {
            updateSubcastegoryList();
        });

        $("#ddlCategoryList").on("change", function () {
            updateSubcastegoryList();
        })
		
    </script>

	}


}

{ IMAGES
	* When dealing with images- we need IWebHostEnvironment when storing them on the server.
	
	1. GET the WebRootPath
	string webRootPath = hostingEnv.WebRootPath;
	
	2. GET the files from the request
	var files = HttpContext.Request.Form.Files;
	
	3. GET the Entity from DB which contains the image, by entityId
	
	4. GET complete path to IMG folder in wwwroot
	var uploads = Path.Combine(webRootPath, "img");
	
	5. GET extension of the file. We allow now only one file upload
	
	6. SAVE the file location from server as string
	 using (var filesStream = new FileStream(Path.Combine(uploads, MenuItemVM.MenuItem.Id + extension), FileMode.Create))
    {
        files[0].CopyTo(filesStream);
    }
	
	7. Change Image Column in the DB with the location where it is saved
	menuItemFromDb.Image = @"\img\" + entityId + extension;
	
	8. If NO UPLOADED image, then:
	
	   8.1. GET Default Image
	   var uploads = Path.Combine(webRootPath, @"img\" + StaticDetails.DefaultFoodImage);
	   
	   8.2. Copy it in the wwwroot with unique name
	   System.IO.File.Copy(uploads, @"\img\" + MenuItemVM.MenuItem.Id + ".jpg");
	   
	   8.3. Update this entry in DB
	
	
	
}
